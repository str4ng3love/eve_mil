// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   // url          = env("DB_DEV_URL")
//   relationMode = "prisma"
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model User {
//   id            String         @id @default(cuid())
//   name          String         @unique
//   email         String?        @unique
//   emailVerified DateTime?
//   image         String         @unique
//   accounts      Account[]
//   sessions      Session[]
//   guides        Guide[]
//   comments      Comment[]
//   userPortrait  Guide[]        @relation(name: "UserPortrait")
//   userName      Guide[]        @relation(name: "UserName")
//   likedComments PropsComment[]
//   likedGuides   PropsGuide[]
// }

// model Comment {
//   id        String         @id @default(uuid())
//   message   String         @db.LongText
//   createdAt String
//   updatedAt String?
//   user      User           @relation(fields: [userId], references: [id], onDelete: Cascade) 
//   userId    String

//   author  String 
//   guide     Guide?         @relation(fields: [guideId], references: [id], onDelete: Cascade)
//   guideId   String?
//   parent    Comment?       @relation(name: "ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   children  Comment[]      @relation(name: "ParentChild")
//   parentId  String?
//   likes     PropsComment[]

//   @@index(userId)
//   @@index(guideId)
//   @@index(parentId)
// }

// model Guide {
//   id             String       @id @default(cuid())
//   title          String
//   description    String
//   content        Json?
//   createdAt      String
//   updatedAt      String?
//   category       Category
//   language       Language
//   user           User         @relation(fields: [userId], references: [id])
//   userId         String
//   userPortrait   User         @relation(name: "UserPortrait", fields: [authorPortrait], references: [image])
//   authorPortrait String
//   userName       User         @relation(name: "UserName", fields: [authorName], references: [name])
//   authorName     String
//   comments       Comment[]
//   likes          PropsGuide[]

//   @@index([authorName])
//   @@index([authorPortrait])
//   @@index([userId])
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model PropsGuide {
//   id      String    @unique @default(uuid())
//   user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId  String
//   guide   Guide     @relation(fields: [guideId], references: [id])
//   guideId String
//   like    LikeState

//   @@id([userId, guideId])
//   @@index([userId])
//   @@index([guideId])
// }

// model PropsComment {
//   id        String    @unique @default(uuid())
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String
//   comment   Comment   @relation(fields: [commentId], references: [id])
//   commentId String
//   like      LikeState

//   @@id([userId, commentId])
//   @@index([userId])
//   @@index([commentId])
// }

// enum Category {
//   FW
//   BUSINESS
//   FLIGHT
//   BASICS
// }

// enum Language {
//   PL
//   EN
// }

// enum LikeState {
//   LIKE
//   DISLIKE
// }
