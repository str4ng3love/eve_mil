generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // url          = env("DB_DEV_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  charId        Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String    @unique
  isAdmin       Boolean @default(false)
  isMod         Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  comments      Comment[] @relation("UserID")
  Comment       Comment[] @relation("Authors")
  guides        Guide[]
  userPortrait  Guide[]   @relation("UserPortrait")
  userName      Guide[]   @relation("UserName")
  dislike       Dislike[]
  likes         Like[]
}

model Comment {
  id        String    @id @default(uuid())
  createdAt String 
  message   String    @db.LongText
  parentId  String?
  updatedAt String? 
  userId    String
  author    String
  guideId   String?
  user      User      @relation("UserID", fields: [userId], references: [id], onDelete: Cascade)
  userName  User      @relation("Authors", fields: [author], references: [name])
  guide     Guide?    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("ParentChild")
  dislikes  Dislike[]
  like      Like[]

  @@index([author])
  @@index([userId])
  @@index([guideId])
  @@index([parentId])
}

model Guide {
  id             String    @id @default(cuid())
  title          String
  description    String
  content        Json?
  createdAt      String
  category       Category
  authorName     String
  authorPortrait String
  language       Language
  updatedAt      String?
  scope          Scope 
  userId         String
  comments       Comment[]
  user           User      @relation(fields: [userId], references: [id])
  userPortrait   User      @relation("UserPortrait", fields: [authorPortrait], references: [image])
  userName       User      @relation("UserName", fields: [authorName], references: [name])
  dislikes       Dislike[] 
  likes          Like[]

  @@index([authorName])
  @@index([authorPortrait])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dislike {
  id        String   @unique @default(uuid())
  userId    String
  guideId   String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guide     Guide?   @relation(fields: [guideId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@index([userId])
  @@index([commentId])
  @@index([guideId])
}

model Like {
  id        String   @unique @default(uuid())
  userId    String
  guideId   String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guide     Guide?   @relation(fields: [guideId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@index([userId])
  @@index([commentId])
  @@index([guideId])
}



enum Category {
  FW
  BUSINESS
  FLIGHT
  BASICS
}

enum Language {
  PL
  EN
}
enum Scope {
  COMMUNITY
  OFFICIAL
}